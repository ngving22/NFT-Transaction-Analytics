# -*- coding: utf-8 -*-
"""Rarible_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HfN8MRpxx7UPDERwvJ-bhnj2r4gBGdNI

**Importing original CSV to make the Dataframe**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#preparing for regression
# import seaborn as sns
# from sklearn import preprocessing, svm
# from sklearn.model_selection import train_test_split
# from sklearn.linear_model import LinearRegression

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/rarible_exchanges_clean.csv")

df = df.astype( {"assetAmount": float,'assetAddress': str} )

# royalties = df.loc[(df['assetType']=='ETH') & (df['transferType'] == 'ROYALTY')]['assetAmount'].sum()
# payouts = df.loc[(df['assetType']=='ETH') & (df['transferType'] == 'PAYOUT')]['assetAmount'].sum()

# print( f"Number of payouts = {len(df.loc[df['transferType'] == 'PAYOUT'])}" )
# print( f"Number of royalty payments = {len(df.loc[df['transferType'] == 'ROYALTY'])}" )

# print( f"Number of ETH payouts = {len(df.loc[(df['transferType'] == 'PAYOUT')&(df['assetType']=='ETH')])}" )
# print( f"Number of non-ETH payouts = {len(df.loc[(df['transferType'] == 'PAYOUT')&(df['assetType']!='ETH')])}" )
# print( f"Number of ETH royalty payments = {len(df.loc[(df['transferType'] == 'ROYALTY')&(df['assetType']=='ETH')])}" )
# print( f"Number of non-ETH royalty payments = {len(df.loc[(df['transferType'] == 'ROYALTY')&(df['assetType'] != 'ETH')])}" )

# print( f"ETH payouts = {payouts}" )
# print( f"ETH royalties = {royalties}" )
# print( f"Percent royalties = {royalties/payouts}" )

# ##############################

# df2 = pd.DataFrame( { 'assetAddress': df.assetAddress.unique() } )
# totals = df.groupby(['assetAddress','transferType','assetType']).agg({"assetAmount":"sum"})

# payouts = df.loc[(df['assetType']=='ETH') & (df['transferType'] == 'PAYOUT')][['to','assetAmount']].groupby('to').agg({'assetAmount':'sum'}).rename(columns={'assetAmount':'PAYOUT'},inplace=False).sort_values(by='PAYOUT',ascending=False)
# royalties = df.loc[(df['assetType']=='ETH') & (df['transferType'] == 'ROYALTY')][['to','assetAmount']].groupby('to').agg({'assetAmount':'sum'}).rename(columns={'assetAmount':'ROYALTY'},inplace=False).sort_values(by='ROYALTY',ascending=False)
# numpayments = df.loc[(df['assetType']=='ETH') & (df['transferType'] == 'PAYMENT')][['to','assetAmount']].groupby('to').agg({'assetAmount':'count'}).rename(columns={'assetAmount':'PAYOUT'},inplace=False).sort_values(by='PAYOUT',ascending=False)
# numroyalties = df.loc[(df['assetType']=='ETH') & (df['transferType'] == 'ROYALTY')][['to','assetAmount']].groupby('to').agg({'assetAmount':'count'}).rename(columns={'assetAmount':'ROYALTY'},inplace=False).sort_values(by='ROYALTY',ascending=False)

# # payouts = df.loc[([df['transferType']=='PAYOUT'])&(df['assetType']=='ETH')]#.groupby('address').agg({'assetAmount':'sum'})[['address','assetAmount']]


# hist = royalties.hist(bins=np.exp( np.multiply( np.log(10), np.linspace(0,20,40) ) ) )
# plt.savefig("total_royalties.png")
# print( royalties.head() )
# print( royalties.tail() )

# hist = numroyalties.hist(bins=20)
# plt.savefig("count_royalties.png")

# print( numroyalties.head() )
# #df2 = df2.merge( totals.loc[totals.asset

df.shape[0]

df.tail()

"""**Studying the reOccurrence in "to-address" column**"""

df.to.value_counts().head(50)

df["from"].value_counts()

df['to'].value_counts().loc[lambda x: x>10000]

value_counts_to = df['to'].value_counts()

df_to = pd.DataFrame(value_counts_to)
df_to = df_to.reset_index()
df_to.columns = ['address', 'Occurrence']
df_to

"""**At this point, we have 59897 unique to address out of the 488556 transaction**"""

df_balance = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/balance_info.csv")

df_balance

df_to_balance = pd.merge(df_to, df_balance, how="outer")
df_to_balance.head(25)

df_to_balance.head(25).to_csv('top_25_occurrence.csv')

df_to_balance = df_to_balance.apply(pd.to_numeric, errors = 'coerce')

"""**Here, we study the correlation of variables.**"""

df3 = pd.DataFrame(df_to_balance.corr())

df3

df3.to_csv('currency_occurrence_correlation.csv')

"""**Now, we study the dataframe with contract name.**


"""

df_name = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/balance_info_new.csv")

df_name

